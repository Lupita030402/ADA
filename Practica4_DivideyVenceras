#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

// Estructura para representar un punto en 2D
typedef struct {
    double x;
    double y;
} Punto;

// Función para generar un número decimal aleatorio entre -100 y 100
double generarNumeroAleatorio() {
    return ((double)rand() / RAND_MAX) * 200.0 - 100.0;
}

// Función para generar puntos aleatorios en 2D
void generarPuntos(Punto puntos[], int n) {
    for (int i = 0; i < n; i++) {
        puntos[i].x = generarNumeroAleatorio();
        puntos[i].y = generarNumeroAleatorio();
        printf("Punto %d: (%.2f, %.2f)\n", i + 1, puntos[i].x, puntos[i].y);
    }
}

// Función para calcular la distancia euclidiana entre dos puntos
double calcularDistancia(Punto p1, Punto p2) {
    return sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2));
}

// Función para encontrar el par de puntos más cercano
void encontrarParejaMasCercana(Punto puntos[], int n) {
    double minDistancia = calcularDistancia(puntos[0], puntos[1]);
    Punto punto1 = puntos[0], punto2 = puntos[1];

    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            double distancia = calcularDistancia(puntos[i], puntos[j]);
            if (distancia < minDistancia) {
                minDistancia = distancia;
                punto1 = puntos[i];
                punto2 = puntos[j];
            }
        }
    }

    printf("\nEl par de puntos más cercano es: (%.2f, %.2f) y (%.2f, %.2f)\n", 
           punto1.x, punto1.y, punto2.x, punto2.y);
    printf("Distancia euclidiana: %.4f\n", minDistancia);
}

int main() {
    int n;
    printf("Ingrese el número de puntos a generar: ");
    scanf("%d", &n);

    // Crear un array de puntos
    Punto puntos[n];

    // Inicializar la semilla para la generación de números aleatorios
    srand(time(0));

    // Medir el tiempo de ejecución
    clock_t start_time, end_time;
    double tiempo_ejecucion;

    // Generar y mostrar los puntos aleatorios
    start_time = clock();
    generarPuntos(puntos, n);

    // Encontrar el par de puntos más cercano
    encontrarParejaMasCercana(puntos, n);
    end_time = clock();

    // Calcular el tiempo de ejecución
    tiempo_ejecucion = ((double)(end_time - start_time)) / CLOCKS_PER_SEC;

    printf("\nTiempo de ejecución: %.6f segundos\n", tiempo_ejecucion);

    return 0;
}
