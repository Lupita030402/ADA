#include <stdio.h>
#include <stdlib.h>

// Estructura para un nodo de lista vinculada
struct ListNode {
    int val;
    struct ListNode* next;
};

// Función para crear un nuevo nodo de la lista vinculada
struct ListNode* createNode(int val) {
    struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
    newNode->val = val;
    newNode->next = NULL;
    return newNode;
}

// Función para fusionar dos listas vinculadas
struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {
    if (!l1) return l2;
    if (!l2) return l1;
    if (l1->val < l2->val) {
        l1->next = mergeTwoLists(l1->next, l2);
        return l1;
    } else {
        l2->next = mergeTwoLists(l1, l2->next);
        return l2;
    }
}

// Función recursiva para fusionar k listas vinculadas
struct ListNode* mergeKLists(struct ListNode** lists, int k) {
    if (k == 0) return NULL;
    if (k == 1) return lists[0];
    int mid = k / 2;
    struct ListNode* l1 = mergeKLists(lists, mid);
    struct ListNode* l2 = mergeKLists(lists + mid, k - mid);
    return mergeTwoLists(l1, l2);
}

// Función para convertir un arreglo en una lista vinculada
struct ListNode* arrayToList(int* arr, int size) {
    if (size == 0) return NULL;
    struct ListNode* head = createNode(arr[0]);
    struct ListNode* current = head;
    for (int i = 1; i < size; i++) {
        current->next = createNode(arr[i]);
        current = current->next;
    }
    return head;
}

// Función para imprimir la lista vinculada
void printList(struct ListNode* head) {
    while (head != NULL) {
        printf("%d ", head->val);
        head = head->next;
    }
    printf("\n");
}

int main() {
    // Entrada de ejemplo: listas de arreglos
    int list1[] = {1, 4, 5};
    int list2[] = {1, 3, 4};
    int list3[] = {2, 6};

    // Convertimos los arreglos en listas vinculadas
    struct ListNode* lists[3];
    lists[0] = arrayToList(list1, sizeof(list1) / sizeof(list1[0]));
    lists[1] = arrayToList(list2, sizeof(list2) / sizeof(list2[0]));
    lists[2] = arrayToList(list3, sizeof(list3) / sizeof(list3[0]));

    // Fusionar las listas
    struct ListNode* mergedList = mergeKLists(lists, 3);

    // Imprimir la lista fusionada
    printf("Lista fusionada: ");
    printList(mergedList);

    return 0;
}
